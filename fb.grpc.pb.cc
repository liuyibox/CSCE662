// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fb.proto

#include "fb.pb.h"
#include "fb.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace assignment2 {

static const char* FBChatServer_method_names[] = {
  "/assignment2.FBChatServer/Login",
  "/assignment2.FBChatServer/Connect",
  "/assignment2.FBChatServer/List",
  "/assignment2.FBChatServer/Join",
  "/assignment2.FBChatServer/Leave",
  "/assignment2.FBChatServer/Chat",
  "/assignment2.FBChatServer/Alive",
  "/assignment2.FBChatServer/Check",
};

std::unique_ptr< FBChatServer::Stub> FBChatServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FBChatServer::Stub> stub(new FBChatServer::Stub(channel));
  return stub;
}

FBChatServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(FBChatServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(FBChatServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(FBChatServer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Join_(FBChatServer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leave_(FBChatServer_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chat_(FBChatServer_method_names[5], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Alive_(FBChatServer_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Check_(FBChatServer_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FBChatServer::Stub::Login(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::Status FBChatServer::Stub::Connect(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::Status FBChatServer::Stub::List(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ShowList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ShowList>* FBChatServer::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ShowList>::Create(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::Status FBChatServer::Stub::Join(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Join_, context, request);
}

::grpc::Status FBChatServer::Stub::Leave(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Leave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncLeaveRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request);
}

::grpc::ClientReaderWriter< ::assignment2::Post, ::assignment2::Post>* FBChatServer::Stub::ChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::assignment2::Post, ::assignment2::Post>(channel_.get(), rpcmethod_Chat_, context);
}

::grpc::ClientAsyncReaderWriter< ::assignment2::Post, ::assignment2::Post>* FBChatServer::Stub::AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::assignment2::Post, ::assignment2::Post>::Create(channel_.get(), cq, rpcmethod_Chat_, context, tag);
}

::grpc::Status FBChatServer::Stub::Alive(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Alive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncAliveRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Alive_, context, request);
}

::grpc::Status FBChatServer::Stub::Check(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* FBChatServer::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::assignment2::ClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Check_, context, request);
}

FBChatServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Connect), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ShowList>(
          std::mem_fn(&FBChatServer::Service::List), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Join), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Leave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[5],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< FBChatServer::Service, ::assignment2::Post, ::assignment2::Post>(
          std::mem_fn(&FBChatServer::Service::Chat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Alive), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FBChatServer_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FBChatServer::Service, ::assignment2::ClientRequest, ::assignment2::ServerReply>(
          std::mem_fn(&FBChatServer::Service::Check), this)));
}

FBChatServer::Service::~Service() {
}

::grpc::Status FBChatServer::Service::Login(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Connect(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::List(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ShowList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Join(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Leave(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::assignment2::Post, ::assignment2::Post>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Alive(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FBChatServer::Service::Check(::grpc::ServerContext* context, const ::assignment2::ClientRequest* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RegisterServer_method_names[] = {
  "/assignment2.RegisterServer/ServerRegister",
  "/assignment2.RegisterServer/ProcHeartBeat",
  "/assignment2.RegisterServer/Election",
  "/assignment2.RegisterServer/Join",
  "/assignment2.RegisterServer/Login",
  "/assignment2.RegisterServer/Leave",
  "/assignment2.RegisterServer/updateTimeLine",
  "/assignment2.RegisterServer/msgForward",
};

std::unique_ptr< RegisterServer::Stub> RegisterServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< RegisterServer::Stub> stub(new RegisterServer::Stub(channel));
  return stub;
}

RegisterServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ServerRegister_(RegisterServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcHeartBeat_(RegisterServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Election_(RegisterServer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Join_(RegisterServer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(RegisterServer_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leave_(RegisterServer_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateTimeLine_(RegisterServer_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_msgForward_(RegisterServer_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegisterServer::Stub::ServerRegister(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerRegister_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncServerRegisterRaw(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_ServerRegister_, context, request);
}

::grpc::Status RegisterServer::Stub::ProcHeartBeat(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ProcHeartBeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncProcHeartBeatRaw(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_ProcHeartBeat_, context, request);
}

::grpc::Status RegisterServer::Stub::Election(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Election_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncElectionRaw(::grpc::ClientContext* context, const ::assignment2::ServerReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Election_, context, request);
}

::grpc::Status RegisterServer::Stub::Join(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Join_, context, request);
}

::grpc::Status RegisterServer::Stub::Login(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::Status RegisterServer::Stub::Leave(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Leave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncLeaveRaw(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request);
}

::grpc::Status RegisterServer::Stub::updateTimeLine(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_updateTimeLine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncupdateTimeLineRaw(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_updateTimeLine_, context, request);
}

::grpc::Status RegisterServer::Stub::msgForward(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::assignment2::ServerReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_msgForward_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>* RegisterServer::Stub::AsyncmsgForwardRaw(::grpc::ClientContext* context, const ::assignment2::DataSync& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::assignment2::ServerReply>::Create(channel_.get(), cq, rpcmethod_msgForward_, context, request);
}

RegisterServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::ServerReply, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::ServerRegister), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::ServerReply, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::ProcHeartBeat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::ServerReply, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::Election), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::DataSync, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::Join), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::DataSync, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::DataSync, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::Leave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::DataSync, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::updateTimeLine), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RegisterServer_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RegisterServer::Service, ::assignment2::DataSync, ::assignment2::ServerReply>(
          std::mem_fn(&RegisterServer::Service::msgForward), this)));
}

RegisterServer::Service::~Service() {
}

::grpc::Status RegisterServer::Service::ServerRegister(::grpc::ServerContext* context, const ::assignment2::ServerReply* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::ProcHeartBeat(::grpc::ServerContext* context, const ::assignment2::ServerReply* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::Election(::grpc::ServerContext* context, const ::assignment2::ServerReply* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::Join(::grpc::ServerContext* context, const ::assignment2::DataSync* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::Login(::grpc::ServerContext* context, const ::assignment2::DataSync* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::Leave(::grpc::ServerContext* context, const ::assignment2::DataSync* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::updateTimeLine(::grpc::ServerContext* context, const ::assignment2::DataSync* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterServer::Service::msgForward(::grpc::ServerContext* context, const ::assignment2::DataSync* request, ::assignment2::ServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace assignment2

