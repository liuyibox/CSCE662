// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fb.proto

#ifndef PROTOBUF_fb_2eproto__INCLUDED
#define PROTOBUF_fb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace assignment2 {
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class DataSync;
class DataSyncDefaultTypeInternal;
extern DataSyncDefaultTypeInternal _DataSync_default_instance_;
class Post;
class PostDefaultTypeInternal;
extern PostDefaultTypeInternal _Post_default_instance_;
class ServerReply;
class ServerReplyDefaultTypeInternal;
extern ServerReplyDefaultTypeInternal _ServerReply_default_instance_;
class ShowList;
class ShowListDefaultTypeInternal;
extern ShowListDefaultTypeInternal _ShowList_default_instance_;
}  // namespace assignment2

namespace assignment2 {

namespace protobuf_fb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fb_2eproto

// ===================================================================

class ClientRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment2.ClientRequest) */ {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientRequest* other);
  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requestinfo = 2;
  int requestinfo_size() const;
  void clear_requestinfo();
  static const int kRequestinfoFieldNumber = 2;
  const ::std::string& requestinfo(int index) const;
  ::std::string* mutable_requestinfo(int index);
  void set_requestinfo(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requestinfo(int index, ::std::string&& value);
  #endif
  void set_requestinfo(int index, const char* value);
  void set_requestinfo(int index, const char* value, size_t size);
  ::std::string* add_requestinfo();
  void add_requestinfo(const ::std::string& value);
  #if LANG_CXX11
  void add_requestinfo(::std::string&& value);
  #endif
  void add_requestinfo(const char* value);
  void add_requestinfo(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requestinfo() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requestinfo();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:assignment2.ClientRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requestinfo_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct protobuf_fb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment2.ShowList) */ {
 public:
  ShowList();
  virtual ~ShowList();

  ShowList(const ShowList& from);

  inline ShowList& operator=(const ShowList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowList(ShowList&& from) noexcept
    : ShowList() {
    *this = ::std::move(from);
  }

  inline ShowList& operator=(ShowList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowList& default_instance();

  static inline const ShowList* internal_default_instance() {
    return reinterpret_cast<const ShowList*>(
               &_ShowList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ShowList* other);
  friend void swap(ShowList& a, ShowList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowList* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowList& from);
  void MergeFrom(const ShowList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string all_clients = 1;
  int all_clients_size() const;
  void clear_all_clients();
  static const int kAllClientsFieldNumber = 1;
  const ::std::string& all_clients(int index) const;
  ::std::string* mutable_all_clients(int index);
  void set_all_clients(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_all_clients(int index, ::std::string&& value);
  #endif
  void set_all_clients(int index, const char* value);
  void set_all_clients(int index, const char* value, size_t size);
  ::std::string* add_all_clients();
  void add_all_clients(const ::std::string& value);
  #if LANG_CXX11
  void add_all_clients(::std::string&& value);
  #endif
  void add_all_clients(const char* value);
  void add_all_clients(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& all_clients() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_clients();

  // repeated string joined_clients = 2;
  int joined_clients_size() const;
  void clear_joined_clients();
  static const int kJoinedClientsFieldNumber = 2;
  const ::std::string& joined_clients(int index) const;
  ::std::string* mutable_joined_clients(int index);
  void set_joined_clients(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_joined_clients(int index, ::std::string&& value);
  #endif
  void set_joined_clients(int index, const char* value);
  void set_joined_clients(int index, const char* value, size_t size);
  ::std::string* add_joined_clients();
  void add_joined_clients(const ::std::string& value);
  #if LANG_CXX11
  void add_joined_clients(::std::string&& value);
  #endif
  void add_joined_clients(const char* value);
  void add_joined_clients(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& joined_clients() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_joined_clients();

  // @@protoc_insertion_point(class_scope:assignment2.ShowList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_clients_;
  ::google::protobuf::RepeatedPtrField< ::std::string> joined_clients_;
  mutable int _cached_size_;
  friend struct protobuf_fb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment2.ServerReply) */ {
 public:
  ServerReply();
  virtual ~ServerReply();

  ServerReply(const ServerReply& from);

  inline ServerReply& operator=(const ServerReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerReply(ServerReply&& from) noexcept
    : ServerReply() {
    *this = ::std::move(from);
  }

  inline ServerReply& operator=(ServerReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerReply& default_instance();

  static inline const ServerReply* internal_default_instance() {
    return reinterpret_cast<const ServerReply*>(
               &_ServerReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerReply* other);
  friend void swap(ServerReply& a, ServerReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerReply& from);
  void MergeFrom(const ServerReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string portnum = 2;
  void clear_portnum();
  static const int kPortnumFieldNumber = 2;
  const ::std::string& portnum() const;
  void set_portnum(const ::std::string& value);
  #if LANG_CXX11
  void set_portnum(::std::string&& value);
  #endif
  void set_portnum(const char* value);
  void set_portnum(const char* value, size_t size);
  ::std::string* mutable_portnum();
  ::std::string* release_portnum();
  void set_allocated_portnum(::std::string* portnum);

  // int32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 leader = 4;
  void clear_leader();
  static const int kLeaderFieldNumber = 4;
  ::google::protobuf::int32 leader() const;
  void set_leader(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:assignment2.ServerReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr portnum_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 leader_;
  mutable int _cached_size_;
  friend struct protobuf_fb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment2.Post) */ {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Post(Post&& from) noexcept
    : Post() {
    *this = ::std::move(from);
  }

  inline Post& operator=(Post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Post& default_instance();

  static inline const Post* internal_default_instance() {
    return reinterpret_cast<const Post*>(
               &_Post_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Post* other);
  friend void swap(Post& a, Post& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Post* New() const PROTOBUF_FINAL { return New(NULL); }

  Post* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Post* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:assignment2.Post)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_fb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment2.DataSync) */ {
 public:
  DataSync();
  virtual ~DataSync();

  DataSync(const DataSync& from);

  inline DataSync& operator=(const DataSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSync(DataSync&& from) noexcept
    : DataSync() {
    *this = ::std::move(from);
  }

  inline DataSync& operator=(DataSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSync& default_instance();

  static inline const DataSync* internal_default_instance() {
    return reinterpret_cast<const DataSync*>(
               &_DataSync_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DataSync* other);
  friend void swap(DataSync& a, DataSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSync* New() const PROTOBUF_FINAL { return New(NULL); }

  DataSync* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataSync& from);
  void MergeFrom(const DataSync& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string targetname = 3;
  void clear_targetname();
  static const int kTargetnameFieldNumber = 3;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  #if LANG_CXX11
  void set_targetname(::std::string&& value);
  #endif
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // string servername = 4;
  void clear_servername();
  static const int kServernameFieldNumber = 4;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:assignment2.DataSync)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  mutable int _cached_size_;
  friend struct protobuf_fb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientRequest

// string username = 1;
inline void ClientRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequest::username() const {
  // @@protoc_insertion_point(field_get:assignment2.ClientRequest.username)
  return username_.GetNoArena();
}
inline void ClientRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.ClientRequest.username)
}
#if LANG_CXX11
inline void ClientRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.ClientRequest.username)
}
#endif
inline void ClientRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.ClientRequest.username)
}
inline void ClientRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.ClientRequest.username)
}
inline ::std::string* ClientRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.ClientRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_username() {
  // @@protoc_insertion_point(field_release:assignment2.ClientRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:assignment2.ClientRequest.username)
}

// repeated string requestinfo = 2;
inline int ClientRequest::requestinfo_size() const {
  return requestinfo_.size();
}
inline void ClientRequest::clear_requestinfo() {
  requestinfo_.Clear();
}
inline const ::std::string& ClientRequest::requestinfo(int index) const {
  // @@protoc_insertion_point(field_get:assignment2.ClientRequest.requestinfo)
  return requestinfo_.Get(index);
}
inline ::std::string* ClientRequest::mutable_requestinfo(int index) {
  // @@protoc_insertion_point(field_mutable:assignment2.ClientRequest.requestinfo)
  return requestinfo_.Mutable(index);
}
inline void ClientRequest::set_requestinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assignment2.ClientRequest.requestinfo)
  requestinfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ClientRequest::set_requestinfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:assignment2.ClientRequest.requestinfo)
  requestinfo_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ClientRequest::set_requestinfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requestinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assignment2.ClientRequest.requestinfo)
}
inline void ClientRequest::set_requestinfo(int index, const char* value, size_t size) {
  requestinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assignment2.ClientRequest.requestinfo)
}
inline ::std::string* ClientRequest::add_requestinfo() {
  // @@protoc_insertion_point(field_add_mutable:assignment2.ClientRequest.requestinfo)
  return requestinfo_.Add();
}
inline void ClientRequest::add_requestinfo(const ::std::string& value) {
  requestinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assignment2.ClientRequest.requestinfo)
}
#if LANG_CXX11
inline void ClientRequest::add_requestinfo(::std::string&& value) {
  requestinfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assignment2.ClientRequest.requestinfo)
}
#endif
inline void ClientRequest::add_requestinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requestinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assignment2.ClientRequest.requestinfo)
}
inline void ClientRequest::add_requestinfo(const char* value, size_t size) {
  requestinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assignment2.ClientRequest.requestinfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientRequest::requestinfo() const {
  // @@protoc_insertion_point(field_list:assignment2.ClientRequest.requestinfo)
  return requestinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientRequest::mutable_requestinfo() {
  // @@protoc_insertion_point(field_mutable_list:assignment2.ClientRequest.requestinfo)
  return &requestinfo_;
}

// -------------------------------------------------------------------

// ShowList

// repeated string all_clients = 1;
inline int ShowList::all_clients_size() const {
  return all_clients_.size();
}
inline void ShowList::clear_all_clients() {
  all_clients_.Clear();
}
inline const ::std::string& ShowList::all_clients(int index) const {
  // @@protoc_insertion_point(field_get:assignment2.ShowList.all_clients)
  return all_clients_.Get(index);
}
inline ::std::string* ShowList::mutable_all_clients(int index) {
  // @@protoc_insertion_point(field_mutable:assignment2.ShowList.all_clients)
  return all_clients_.Mutable(index);
}
inline void ShowList::set_all_clients(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assignment2.ShowList.all_clients)
  all_clients_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ShowList::set_all_clients(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:assignment2.ShowList.all_clients)
  all_clients_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ShowList::set_all_clients(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_clients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assignment2.ShowList.all_clients)
}
inline void ShowList::set_all_clients(int index, const char* value, size_t size) {
  all_clients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assignment2.ShowList.all_clients)
}
inline ::std::string* ShowList::add_all_clients() {
  // @@protoc_insertion_point(field_add_mutable:assignment2.ShowList.all_clients)
  return all_clients_.Add();
}
inline void ShowList::add_all_clients(const ::std::string& value) {
  all_clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assignment2.ShowList.all_clients)
}
#if LANG_CXX11
inline void ShowList::add_all_clients(::std::string&& value) {
  all_clients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assignment2.ShowList.all_clients)
}
#endif
inline void ShowList::add_all_clients(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assignment2.ShowList.all_clients)
}
inline void ShowList::add_all_clients(const char* value, size_t size) {
  all_clients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assignment2.ShowList.all_clients)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowList::all_clients() const {
  // @@protoc_insertion_point(field_list:assignment2.ShowList.all_clients)
  return all_clients_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShowList::mutable_all_clients() {
  // @@protoc_insertion_point(field_mutable_list:assignment2.ShowList.all_clients)
  return &all_clients_;
}

// repeated string joined_clients = 2;
inline int ShowList::joined_clients_size() const {
  return joined_clients_.size();
}
inline void ShowList::clear_joined_clients() {
  joined_clients_.Clear();
}
inline const ::std::string& ShowList::joined_clients(int index) const {
  // @@protoc_insertion_point(field_get:assignment2.ShowList.joined_clients)
  return joined_clients_.Get(index);
}
inline ::std::string* ShowList::mutable_joined_clients(int index) {
  // @@protoc_insertion_point(field_mutable:assignment2.ShowList.joined_clients)
  return joined_clients_.Mutable(index);
}
inline void ShowList::set_joined_clients(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:assignment2.ShowList.joined_clients)
  joined_clients_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ShowList::set_joined_clients(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:assignment2.ShowList.joined_clients)
  joined_clients_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ShowList::set_joined_clients(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joined_clients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assignment2.ShowList.joined_clients)
}
inline void ShowList::set_joined_clients(int index, const char* value, size_t size) {
  joined_clients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assignment2.ShowList.joined_clients)
}
inline ::std::string* ShowList::add_joined_clients() {
  // @@protoc_insertion_point(field_add_mutable:assignment2.ShowList.joined_clients)
  return joined_clients_.Add();
}
inline void ShowList::add_joined_clients(const ::std::string& value) {
  joined_clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assignment2.ShowList.joined_clients)
}
#if LANG_CXX11
inline void ShowList::add_joined_clients(::std::string&& value) {
  joined_clients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assignment2.ShowList.joined_clients)
}
#endif
inline void ShowList::add_joined_clients(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joined_clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assignment2.ShowList.joined_clients)
}
inline void ShowList::add_joined_clients(const char* value, size_t size) {
  joined_clients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assignment2.ShowList.joined_clients)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowList::joined_clients() const {
  // @@protoc_insertion_point(field_list:assignment2.ShowList.joined_clients)
  return joined_clients_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShowList::mutable_joined_clients() {
  // @@protoc_insertion_point(field_mutable_list:assignment2.ShowList.joined_clients)
  return &joined_clients_;
}

// -------------------------------------------------------------------

// ServerReply

// string message = 1;
inline void ServerReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerReply::message() const {
  // @@protoc_insertion_point(field_get:assignment2.ServerReply.message)
  return message_.GetNoArena();
}
inline void ServerReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.ServerReply.message)
}
#if LANG_CXX11
inline void ServerReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.ServerReply.message)
}
#endif
inline void ServerReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.ServerReply.message)
}
inline void ServerReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.ServerReply.message)
}
inline ::std::string* ServerReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.ServerReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerReply::release_message() {
  // @@protoc_insertion_point(field_release:assignment2.ServerReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:assignment2.ServerReply.message)
}

// string portnum = 2;
inline void ServerReply::clear_portnum() {
  portnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerReply::portnum() const {
  // @@protoc_insertion_point(field_get:assignment2.ServerReply.portnum)
  return portnum_.GetNoArena();
}
inline void ServerReply::set_portnum(const ::std::string& value) {
  
  portnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.ServerReply.portnum)
}
#if LANG_CXX11
inline void ServerReply::set_portnum(::std::string&& value) {
  
  portnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.ServerReply.portnum)
}
#endif
inline void ServerReply::set_portnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.ServerReply.portnum)
}
inline void ServerReply::set_portnum(const char* value, size_t size) {
  
  portnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.ServerReply.portnum)
}
inline ::std::string* ServerReply::mutable_portnum() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.ServerReply.portnum)
  return portnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerReply::release_portnum() {
  // @@protoc_insertion_point(field_release:assignment2.ServerReply.portnum)
  
  return portnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerReply::set_allocated_portnum(::std::string* portnum) {
  if (portnum != NULL) {
    
  } else {
    
  }
  portnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portnum);
  // @@protoc_insertion_point(field_set_allocated:assignment2.ServerReply.portnum)
}

// int32 id = 3;
inline void ServerReply::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ServerReply::id() const {
  // @@protoc_insertion_point(field_get:assignment2.ServerReply.id)
  return id_;
}
inline void ServerReply::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:assignment2.ServerReply.id)
}

// int32 leader = 4;
inline void ServerReply::clear_leader() {
  leader_ = 0;
}
inline ::google::protobuf::int32 ServerReply::leader() const {
  // @@protoc_insertion_point(field_get:assignment2.ServerReply.leader)
  return leader_;
}
inline void ServerReply::set_leader(::google::protobuf::int32 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:assignment2.ServerReply.leader)
}

// -------------------------------------------------------------------

// Post

// string username = 1;
inline void Post::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Post::username() const {
  // @@protoc_insertion_point(field_get:assignment2.Post.username)
  return username_.GetNoArena();
}
inline void Post::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.Post.username)
}
#if LANG_CXX11
inline void Post::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.Post.username)
}
#endif
inline void Post::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.Post.username)
}
inline void Post::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.Post.username)
}
inline ::std::string* Post::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.Post.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_username() {
  // @@protoc_insertion_point(field_release:assignment2.Post.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:assignment2.Post.username)
}

// string content = 2;
inline void Post::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Post::content() const {
  // @@protoc_insertion_point(field_get:assignment2.Post.content)
  return content_.GetNoArena();
}
inline void Post::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.Post.content)
}
#if LANG_CXX11
inline void Post::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.Post.content)
}
#endif
inline void Post::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.Post.content)
}
inline void Post::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.Post.content)
}
inline ::std::string* Post::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.Post.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_content() {
  // @@protoc_insertion_point(field_release:assignment2.Post.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:assignment2.Post.content)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool Post::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void Post::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Post::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:assignment2.Post.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Post::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:assignment2.Post.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Post::release_timestamp() {
  // @@protoc_insertion_point(field_release:assignment2.Post.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Post::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:assignment2.Post.timestamp)
}

// -------------------------------------------------------------------

// DataSync

// string message = 1;
inline void DataSync::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSync::message() const {
  // @@protoc_insertion_point(field_get:assignment2.DataSync.message)
  return message_.GetNoArena();
}
inline void DataSync::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.DataSync.message)
}
#if LANG_CXX11
inline void DataSync::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.DataSync.message)
}
#endif
inline void DataSync::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.DataSync.message)
}
inline void DataSync::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.DataSync.message)
}
inline ::std::string* DataSync::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.DataSync.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSync::release_message() {
  // @@protoc_insertion_point(field_release:assignment2.DataSync.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSync::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:assignment2.DataSync.message)
}

// string username = 2;
inline void DataSync::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSync::username() const {
  // @@protoc_insertion_point(field_get:assignment2.DataSync.username)
  return username_.GetNoArena();
}
inline void DataSync::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.DataSync.username)
}
#if LANG_CXX11
inline void DataSync::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.DataSync.username)
}
#endif
inline void DataSync::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.DataSync.username)
}
inline void DataSync::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.DataSync.username)
}
inline ::std::string* DataSync::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.DataSync.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSync::release_username() {
  // @@protoc_insertion_point(field_release:assignment2.DataSync.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSync::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:assignment2.DataSync.username)
}

// string targetname = 3;
inline void DataSync::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSync::targetname() const {
  // @@protoc_insertion_point(field_get:assignment2.DataSync.targetname)
  return targetname_.GetNoArena();
}
inline void DataSync::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.DataSync.targetname)
}
#if LANG_CXX11
inline void DataSync::set_targetname(::std::string&& value) {
  
  targetname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.DataSync.targetname)
}
#endif
inline void DataSync::set_targetname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.DataSync.targetname)
}
inline void DataSync::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.DataSync.targetname)
}
inline ::std::string* DataSync::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.DataSync.targetname)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSync::release_targetname() {
  // @@protoc_insertion_point(field_release:assignment2.DataSync.targetname)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSync::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:assignment2.DataSync.targetname)
}

// string servername = 4;
inline void DataSync::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSync::servername() const {
  // @@protoc_insertion_point(field_get:assignment2.DataSync.servername)
  return servername_.GetNoArena();
}
inline void DataSync::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assignment2.DataSync.servername)
}
#if LANG_CXX11
inline void DataSync::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assignment2.DataSync.servername)
}
#endif
inline void DataSync::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assignment2.DataSync.servername)
}
inline void DataSync::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assignment2.DataSync.servername)
}
inline ::std::string* DataSync::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:assignment2.DataSync.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSync::release_servername() {
  // @@protoc_insertion_point(field_release:assignment2.DataSync.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSync::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:assignment2.DataSync.servername)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace assignment2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fb_2eproto__INCLUDED
